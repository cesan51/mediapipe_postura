import cv2
import mediapipe as mp
import numpy as np
from math import acos, degrees

mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

cap = cv2.VideoCapture("video_001.mp4")

# Variables para conteo
up = False
down = False
count = 0

with mp_pose.Pose(
     static_image_mode=False) as pose:

     while True:
          ret, frame = cap.read()
          if ret == False:
               break
          #frame = cv2.flip(frame, 1)
          height, width, _ = frame.shape
          frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
          results = pose.process(frame_rgb)

          # Seleccion de puntos a seguir Cadera, Rodilla y Tobillo derecho
          # Todos los puuntos en coordenadas X, Y

          if results.pose_landmarks is not None:
               x1 = int(results.pose_landmarks.landmark[24].x * width)
               y1 = int(results.pose_landmarks.landmark[24].y * height)

               x2 = int(results.pose_landmarks.landmark[26].x * width)
               y2 = int(results.pose_landmarks.landmark[26].y * height)

               x3 = int(results.pose_landmarks.landmark[28].x * width)
               y3 = int(results.pose_landmarks.landmark[28].y * height)


               # Teorema del Coseno para calcular el angulo del triangulo que contara como reps

               p1 = np.array([x1, y1])
               p2 = np.array([x2, y2])
               p3 = np.array([x3, y3])

               # Distancia Euclidiana

               l1 = np.linalg.norm(p2 - p3)
               l2 = np.linalg.norm(p1 - p3)
               l3 = np.linalg.norm(p1 - p2)

               # Calcular el ángulo
               angle = degrees(acos((l1**2 + l3**2 - l2**2) / (2 * l1 * l3)))
               if angle >= 160:
                    up = True
               if up == True and down == False and angle <= 70:
                    down = True
               if up == True and down == True and angle >= 160:
                    count += 1
                    up = False
                    down = False

               #print("count: ", count)
               # Visualización imagen Auxiliar
               # Trazado de lineas desde los puntos

               aux_image = np.zeros(frame.shape, np.uint8)
               cv2.line(aux_image, (x1, y1), (x2, y2), (255, 255, 0), 20)
               cv2.line(aux_image, (x2, y2), (x3, y3), (255, 255, 0), 20)
               cv2.line(aux_image, (x1, y1), (x3, y3), (255, 255, 0), 5)

               #Contorno de llenado del triangulo de prueba

               contours = np.array([[x1, y1], [x2, y2], [x3, y3]])
               cv2.fillPoly(aux_image, pts=[contours], color=(128, 0, 250))

               # Transparencia para ver la img Auxiliar

               output = cv2.addWeighted(frame, 1, aux_image, 0.8, 0)


               # Visualizacion de img y puntos


               cv2.circle(output, (x1, y1), 6, (0, 255, 255), 4)
               cv2.circle(output, (x2, y2), 6, (128, 0, 250), 4)
               cv2.circle(output, (x3, y3), 6, (255, 191, 0), 4)

               # rectangle solo hace parte del diseño
               cv2.rectangle(output, (0, 0), (60, 60), (255, 255, 0), -1)

               # Visual. Angulo obtenido, Ubicacion segun coordenadas dadas
               cv2.putText(output, str(int(angle)), (x2 + 30, y2), 1, 1.5, (128, 0, 250), 2)

               # Conteo de repeticiones si cumple
               cv2.putText(output, str(count), (10, 50), 1, 3.5, (128, 0, 250), 2)
               cv2.imshow("output", output)
          cv2.imshow("Frame", frame)

          # Break con ESC
          if cv2.waitKey(1) & 0xFF == 27:
               break

cap.release()
cv2.destroyAllWindows()